#!/bin/bash

# chkconfig: 2345 47 99
# processname: configure-strongswan
# description: setup strongswan configuration

. /etc/rc.d/init.d/functions
. /usr/bin/vpn_funcs.sh

WORKDIR="/tmp/libreswan"
CA_KEY="$WORKDIR/rootCA.key"
CA_PEM="$WORKDIR/ca.pem"
CA_P12="$WORKDIR/ca.crt"
SERVER_PEM="$WORKDIR/server.pem"
IPSEC_CONF="$WORKDIR/ipsec.conf"
IPSEC_SECRETS="$WORKDIR/ipsec.secrets"
IPSEC_CONF_TMPL="$WORKDIR/ipsec.conf.tmpl"
IPSEC_SECRETS_TMPL="$WORKDIR/ipsec.secrets.tmpl"

gen_cert_subj CA_SUBJ
gen_passwd CA_PASSWD
gen_cert_subj SERVER_SUBJ
gen_passwd SERVER_PASSWD
gen_passwd NSS_PASSWORD
SERVER_SUBJ=${SERVER_SUBJ}

#TODO allow the user to specify the subnet to use - definitely need this
RIGHT_IP="192.168.31.0-192.168.31.255"
IPSECDIR=/etc/ipsec.d
CERTDIR=$IPSECDIR/certs
PRIVATEDIR=$IPSECDIR/private
CA_PASSWD_FILE=$PRIVATEDIR/ca_pass.txt
CACERTDIR=$IPSECDIR/cacerts
CLIP_SERVER=CLIP-SERVER

install_files() {
        cp $IPSEC_CONF $IPSECDIR/server.conf
        cp $IPSEC_SECRETS $IPSECDIR/server.secrets
	chmod 640 ${IPSECDIR}/server.*
}

# args $1 - filename, $2 password
gen_key() {
	openssl genrsa -passout pass:$2 -out $1 $KEYSIZE
}

# Create a self signed CA cert
# args $1 - filename, $2 keyfile, $3 subject
self_sign() {
	dd if=/dev/random of=$WORKDIR/ipsec.noise count=8192 bs=1
	certutil -S -n "${CLIP_CA}" -d ${IPSECDIR} -g ${KEYSIZE} -k rsa \
		-z ${WORKDIR}/ipsec.noise -s ${3} -v ${DAYS} -t 'C,C,C' \
		-f ${NSS_DB_PASSWD} -x -Z SHA256
}


# args
# $1 server key pass
update_ipsec_secrets() {
	sed "s/{SERVERPASS}/$1/" $IPSEC_SECRETS_TMPL > $IPSEC_SECRETS
}

# args
# $1 server IP
# $2 tun IP address assigned to client
update_ipsec_conf() {
	cp ${IPSEC_CONF_TMPL} ${IPSEC_CONF}
	sed -i "s/{VIRT_ADDR_POOL}/${RIGHT_IP}/" $IPSEC_CONF
	sed -i "s/{SERVER_CERT}/${CLIP_SERVER}/" $IPSEC_CONF
}

#Init/Re-init NSS database containing certs and keys
init_swan_db() {
	pushd ${IPSECDIR}
	rm *.db
	popd
        ipsec initnss
	chmod 750 /etc/ipsec.d/
	#reset permissions for the  user cert creation
	dbs="$(find ${IPSECDIR} -type f -iname '*.db')"
	for db in ${dbs}; do
		chown root:vpn ${db}
		chmod 660 ${db}
	done
	modutil -dbdir ${IPSECDIR} -fips true -force
	echo "" > dbpass.orig
	echo "NSS FIPS 140-2 Certificate DB:${NSS_PASSWORD}" > ${NSS_DB_PASSWD}
	chown root:vpn ${NSS_DB_PASSWD}
	chmod 640 ${NSS_DB_PASSWD}
	certutil -W -d ${IPSECDIR} -f dbpass.orig -@ ${NSS_DB_PASSWD}
}

start() {
  init_swan_db
  mkdir -p $WORKDIR
  cd $WORKDIR
  cp /usr/share/vpn/templates/config/ipsec.conf.tmpl $WORKDIR/
  cp /usr/share/vpn/templates/config/ipsec.secrets.tmpl $WORKDIR/
  self_sign $CA_PEM $CA_KEY "$CA_SUBJ"
  cert_gen $SERVER_PASSWD "$SERVER_SUBJ" $CLIP_SERVER

  #we run after networking is up
  SERVER_IP=`ifconfig eno16777736 | grep "inet [[:digit:]]" | cut -d: -f2 | cut -d" " -f1`

  #TODO: Need to check that the params are reasonable
  update_ipsec_conf
  update_ipsec_secrets $SERVER_PASSWD

  install_files

  rm -rf $WORKDIR
}

stop() {
  echo "Nothing to do here"
}

restart() {
  stop
  start
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
